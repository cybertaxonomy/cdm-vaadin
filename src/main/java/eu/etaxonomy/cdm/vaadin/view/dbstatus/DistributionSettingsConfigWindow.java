// $Id$
/**
* Copyright (C) 2015 EDIT
* European Distributed Institute of Taxonomy
* http://www.e-taxonomy.eu
*
* The contents of this file are subject to the Mozilla Public License Version 1.1
* See LICENSE.TXT at the top of this package for the full license terms.
*/
package eu.etaxonomy.cdm.vaadin.view.dbstatus;

import java.sql.SQLException;
import java.util.Set;

import com.vaadin.data.Container;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.sqlcontainer.RowId;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.AbstractLayout;
import com.vaadin.ui.AbstractOrderedLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table.ColumnHeaderMode;
import com.vaadin.ui.TreeTable;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import eu.etaxonomy.cdm.model.common.TermVocabulary;
import eu.etaxonomy.cdm.model.location.NamedArea;
import eu.etaxonomy.cdm.model.taxon.TaxonNode;
import eu.etaxonomy.cdm.vaadin.container.NamedAreaContainer;
import eu.etaxonomy.cdm.vaadin.container.TaxonNodeContainer;
import eu.etaxonomy.cdm.vaadin.container.TaxonTreeContainer;
import eu.etaxonomy.cdm.vaadin.presenter.dbstatus.settings.SettingsPresenter;
import eu.etaxonomy.cdm.vaadin.util.CdmSpringContextHelper;
import eu.etaxonomy.cdm.vaadin.util.DistributionEditorUtil;

/**
 *
 * @author pplitzner
 *
 */
public class DistributionSettingsConfigWindow extends CustomComponent implements ValueChangeListener, ClickListener{

	private static final long serialVersionUID = 1439411115014088780L;
	private ComboBox classificationBox;
    private ComboBox distAreaBox;
    private ListSelect namedAreaList;
    private TreeTable taxonTree;
    private Button okButton;
    private Button cancelButton;
    private final SettingsPresenter presenter;
	private Window window;
	private AbstractOrderedLayout mainLayout;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     * @param distributionTableView
     */
    public DistributionSettingsConfigWindow(DistributionTableView distributionTableView) {
        buildMainLayout();
        presenter = new SettingsPresenter();
        init();
    }

    private void init() {
        Container distributionContainer = presenter.getDistributionContainer();
        TermVocabulary<NamedArea> chosenArea = presenter.getChosenArea();

        classificationBox.setContainerDataSource(new TaxonNodeContainer(null));
		if(classificationBox.getItemIds().size()==1){
		    classificationBox.setValue(classificationBox.getItemIds().iterator().next());
		}
        TaxonNode chosenTaxonNode = presenter.getChosenTaxonNode();
        if(chosenTaxonNode!=null){
        	classificationBox.setValue(chosenTaxonNode.getClassification().getRootNode());
        	try {
                taxonTree.setContainerDataSource(new TaxonTreeContainer((TaxonNode) classificationBox.getValue()));
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        	taxonTree.select(new RowId(chosenTaxonNode.getId()));
            taxonTree.setVisibleColumns("Name");
        }
        classificationBox.addValueChangeListener(this);
        distAreaBox.setContainerDataSource(distributionContainer);
        distAreaBox.setValue(chosenArea);
        distAreaBox.addValueChangeListener(this);

        if(chosenArea!=null){
        	NamedAreaContainer container = new NamedAreaContainer(chosenArea);
        	namedAreaList.setContainerDataSource(container);
        }
        Object selectedAreas = VaadinSession.getCurrent().getAttribute(DistributionEditorUtil.SATTR_SELECTED_AREAS);
        namedAreaList.setValue(selectedAreas);

        okButton.addClickListener(this);
        cancelButton.addClickListener(this);
    }

    public Window createWindow(){
        window = new Window();
        window.setModal(true);
        window.setWidth("60%");
        window.setHeight("80%");
        window.setCaption("Settings");
        window.setContent(mainLayout);
        return window;
    }

    private AbstractLayout buildMainLayout() {

        mainLayout = new VerticalLayout();
        mainLayout.setSizeFull();

    	HorizontalLayout leftAndRightContainer = new HorizontalLayout();
        leftAndRightContainer.setImmediate(false);
        leftAndRightContainer.setSizeFull();
        leftAndRightContainer.setMargin(true);
        leftAndRightContainer.setSpacing(true);

        VerticalLayout leftContainer = new VerticalLayout();
        leftContainer.setImmediate(false);
        leftContainer.setSpacing(true);
        leftContainer.setSizeFull();

        VerticalLayout rightContainer = new VerticalLayout();
        rightContainer.setImmediate(false);
        rightContainer.setSpacing(true);
        rightContainer.setSizeFull();

        //classification and term
        classificationBox = new ComboBox("Classification");
        classificationBox.setItemCaptionPropertyId(TaxonNodeContainer.LABEL);
        classificationBox.setInputPrompt("Please select a classification...");
        classificationBox.setImmediate(true);
        classificationBox.setNewItemsAllowed(false);
        classificationBox.setNullSelectionAllowed(false);
        classificationBox.setSizeFull();
        classificationBox.setWidth("100%");

        //distribution area box
        distAreaBox = new ComboBox("Distribution Area:");
        distAreaBox.setInputPrompt("Please select a distribution area...");
        distAreaBox.setImmediate(true);
        distAreaBox.setNullSelectionAllowed(false);
        distAreaBox.setNewItemsAllowed(false);
        distAreaBox.setSizeFull();
        distAreaBox.setWidth("100%");

        // named areas
        namedAreaList = new ListSelect();
        namedAreaList.setCaption("Areas");
        namedAreaList.setSizeFull();
        namedAreaList.setMultiSelect(true);

        //taxonomy
        taxonTree = new TreeTable("Taxonomy");
        taxonTree.setSelectable(true);
        taxonTree.setSizeFull();
        taxonTree.setImmediate(true);
        taxonTree.setCacheRate(20);
        taxonTree.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);

        leftContainer.addComponent(distAreaBox);
        leftContainer.addComponent(namedAreaList);
        leftContainer.setExpandRatio(distAreaBox, 0.1f);
        leftContainer.setExpandRatio(namedAreaList, 0.9f);
        leftContainer.setSizeFull();

        rightContainer.addComponent(classificationBox);
        rightContainer.addComponent(taxonTree);
        rightContainer.setExpandRatio(classificationBox, 0.1f);
        rightContainer.setExpandRatio(taxonTree, 0.9f);

        leftAndRightContainer.addComponent(leftContainer);
        leftAndRightContainer.addComponent(rightContainer);

        //button toolbar
        HorizontalLayout buttonToolBar = new HorizontalLayout();
        // cancelButton
        cancelButton = new Button();
        cancelButton.setCaption("Cancel");
        cancelButton.setImmediate(true);
        buttonToolBar.addComponent(cancelButton);

        // okButton
        okButton = new Button();
        okButton.setCaption("OK");
        okButton.setImmediate(true);
        buttonToolBar.addComponent(okButton);

        mainLayout.addComponent(leftAndRightContainer);
        mainLayout.addComponent(buttonToolBar);
        mainLayout.setExpandRatio(leftAndRightContainer, 0.9f);
        mainLayout.setExpandRatio(buttonToolBar, 0.1f);
        mainLayout.setComponentAlignment(buttonToolBar, Alignment.BOTTOM_RIGHT);

        return leftAndRightContainer;
    }

	@Override
	public void valueChange(ValueChangeEvent event) {
		Property property = event.getProperty();
		if(property==classificationBox){
			TaxonNode parentNode = (TaxonNode) event.getProperty().getValue();
			if(parentNode!=null){
			    try {
                    taxonTree.setContainerDataSource(new TaxonTreeContainer(parentNode));
                    taxonTree.setVisibleColumns("Name");
                } catch (SQLException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
			}
			else{
				taxonTree.setContainerDataSource(null);
			}
		}

		else if(property==distAreaBox){
			TermVocabulary<NamedArea> vocabulary = (TermVocabulary<NamedArea>) event.getProperty().getValue();
			NamedAreaContainer container = new NamedAreaContainer(vocabulary);
			namedAreaList.setContainerDataSource(container);
		}
	}

	@Override
	public void buttonClick(ClickEvent event) {
		Object source = event.getSource();
		if(source==okButton){
			TaxonNode taxonNode = null;
			TermVocabulary<NamedArea> term = null;
			//TODO use field converter
			if(taxonTree.getValue()!=null){
			    taxonNode = CdmSpringContextHelper.getTaxonNodeService().find((Integer)((RowId) taxonTree.getValue()).getId()[0]);
			}
			if(taxonNode==null){
				taxonNode = (TaxonNode) classificationBox.getValue();
			}
			term = (TermVocabulary<NamedArea>) distAreaBox.getValue();
			Set<NamedArea> selectedAreas = (Set<NamedArea>) namedAreaList.getValue();
			if(taxonNode==null){
				Notification.show("Please choose a classification and/or taxon", Notification.Type.HUMANIZED_MESSAGE);
				return;
			}
			if(term==null){
				Notification.show("Please choose a distribution area", Notification.Type.HUMANIZED_MESSAGE);
				return;
			}
			DistributionEditorUtil.openDistributionView(taxonNode, term, selectedAreas);
			window.close();
		}
		else if(source==cancelButton){
			window.close();
		}
	}

}
