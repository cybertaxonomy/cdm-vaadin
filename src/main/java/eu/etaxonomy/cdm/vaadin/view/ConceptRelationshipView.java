// $Id$
/**
 * Copyright (C) 2015 EDIT
 * European Distributed Institute of Taxonomy
 * http://www.e-taxonomy.eu
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * See LICENSE.TXT at the top of this package for the full license terms.
 */
package eu.etaxonomy.cdm.vaadin.view;

import java.util.Arrays;
import java.util.UUID;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.event.Transferable;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.DropTarget;
import com.vaadin.event.dd.acceptcriteria.AcceptAll;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbstractSelect.AbstractSelectTargetDetails;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TreeTable;

import eu.etaxonomy.cdm.vaadin.component.ConceptRelationshipComposite;
import eu.etaxonomy.cdm.vaadin.component.EditConceptRelationshipComposite;
import eu.etaxonomy.cdm.vaadin.component.StatusComposite;
import eu.etaxonomy.cdm.vaadin.container.IdUuidName;
import eu.etaxonomy.cdm.vaadin.container.LeafNodeTaxonContainer;
import eu.etaxonomy.cdm.vaadin.jscomponent.D3ConceptRelationshipTree.Direction;
import eu.etaxonomy.cdm.vaadin.session.BasicEvent;
import eu.etaxonomy.cdm.vaadin.session.CdmChangeEvent;
import eu.etaxonomy.cdm.vaadin.session.IBasicEventListener;
import eu.etaxonomy.cdm.vaadin.session.SelectionEvent;
import eu.etaxonomy.cdm.vaadin.util.CdmVaadinSessionUtilities;

/**
 * @author cmathew
 * @date 9 Apr 2015
 *
 */
public class ConceptRelationshipView extends CustomComponent implements View, IBasicEventListener {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private HorizontalLayout mainLayout;
    @AutoGenerated
    private StatusComposite statusCompositeRight;
    @AutoGenerated
    private ConceptRelationshipComposite conceptRelationshipComposite;
    @AutoGenerated
    private StatusComposite statusCompositeLeft;

    private StatusComposite primaryStatusComposite, secondaryStatusComposite;

    private Direction direction;
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public ConceptRelationshipView() {

        buildMainLayout();
        setCompositionRoot(mainLayout);

        conceptRelationshipComposite.setView(this);
        conceptRelationshipComposite.setSizeFull();

        setPrimaryStatusCompositeUuid(statusCompositeLeft.getSelectedClassificationUuid());
        direction = Direction.LEFT_RIGHT;
        CdmVaadinSessionUtilities.getCurrentBasicEventService().register(this);

        initDropHandlers();
    }

    /* (non-Javadoc)
     * @see com.vaadin.navigator.View#enter(com.vaadin.navigator.ViewChangeListener.ViewChangeEvent)
     */
    @Override
    public void enter(ViewChangeEvent event) {

    }

    public Direction getDirection() {
        return direction;
    }

    public void initDropHandlers() {
        statusCompositeLeft.getTaxaTreeTable().setDropHandler(new ConceptRelationshipDropHandler(statusCompositeRight));
        statusCompositeRight.getTaxaTreeTable().setDropHandler(new ConceptRelationshipDropHandler(statusCompositeLeft));
    }

    public void setPrimaryStatusCompositeUuid(UUID scUuid) {
        if(scUuid != null) {
            if(scUuid.equals(statusCompositeLeft.getSelectedClassificationUuid())) {
                primaryStatusComposite = statusCompositeLeft;
                secondaryStatusComposite = statusCompositeRight;
                direction = Direction.LEFT_RIGHT;
            }
            if(scUuid.equals(statusCompositeRight.getSelectedClassificationUuid())) {
                secondaryStatusComposite = statusCompositeLeft;
                primaryStatusComposite = statusCompositeRight;
                direction = Direction.RIGHT_LEFT;
            }
            secondaryStatusComposite.clearTaxaTableSelections();
        }
    }

    /* (non-Javadoc)
     * @see eu.etaxonomy.cdm.vaadin.session.IBasicEventListener#onAction(eu.etaxonomy.cdm.vaadin.session.BasicEvent)
     */
    @Override
    public void onAction(BasicEvent event) {
        if(ConceptRelationshipComposite.UPDATE_START_ID.equals(event.getEventId())) {
            primaryStatusComposite.setTaxaTableEnabled(false);
            secondaryStatusComposite.setTaxaTableSelectable(false);
        }
        if(ConceptRelationshipComposite.UPDATE_END_ID.equals(event.getEventId())) {
            primaryStatusComposite.setTaxaTableEnabled(true);
            secondaryStatusComposite.setTaxaTableSelectable(true);
        }
    }

    @AutoGenerated
    private HorizontalLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new HorizontalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");
        mainLayout.setMargin(true);

        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");

        // statusCompositeLeft
        statusCompositeLeft = new StatusComposite();
        statusCompositeLeft.setImmediate(false);
        statusCompositeLeft.setWidth("-1px");
        statusCompositeLeft.setHeight("-1px");
        mainLayout.addComponent(statusCompositeLeft);

        // conceptRelationshipComposite
        conceptRelationshipComposite = new ConceptRelationshipComposite();
        conceptRelationshipComposite.setImmediate(false);
        conceptRelationshipComposite.setWidth("-1px");
        conceptRelationshipComposite.setHeight("-1px");
        mainLayout.addComponent(conceptRelationshipComposite);
        mainLayout.setExpandRatio(conceptRelationshipComposite, 1.0f);
        mainLayout.setComponentAlignment(conceptRelationshipComposite, new Alignment(20));

        // statusCompositeRight
        statusCompositeRight = new StatusComposite();
        statusCompositeRight.setImmediate(false);
        statusCompositeRight.setWidth("-1px");
        statusCompositeRight.setHeight("-1px");
        mainLayout.addComponent(statusCompositeRight);

        return mainLayout;
    }

    private class ConceptRelationshipDropHandler implements DropHandler {

        private StatusComposite sourceSc;


        public ConceptRelationshipDropHandler(StatusComposite sourceSc) {
            this.sourceSc = sourceSc;
        }

        @Override
        public AcceptCriterion getAcceptCriterion() {
            return AcceptAll.get();
        }

        @Override
        public void drop(DragAndDropEvent event) {
            // Wrapper for the object that is dragged
            Transferable t = event.getTransferable();
            Component source = t.getSourceComponent();

            // This is the case where the source of the dd is another
            // taxon table not the one in this object
            if (source instanceof TreeTable  && source == sourceSc.getTaxaTreeTable()) {
                TreeTable sourceTable = (TreeTable)t.getSourceComponent();
                LeafNodeTaxonContainer sourceContainer = (LeafNodeTaxonContainer)sourceTable.getContainerDataSource();

                IdUuidName fromTaxonIun, toTaxonIun;

                Object sourceItemId = t.getData("itemId");
                String fromName = (String)sourceContainer.getProperty(sourceItemId, LeafNodeTaxonContainer.NAME_ID).getValue();

                AbstractSelectTargetDetails dropData = ((AbstractSelectTargetDetails) event.getTargetDetails());
                DropTarget target = dropData.getTarget();
                if(target instanceof TreeTable) {
                    TreeTable targetTable = (TreeTable)target;
                    Container container = targetTable.getContainerDataSource();
                    if(container instanceof LeafNodeTaxonContainer) {
                        LeafNodeTaxonContainer targetContainer = (LeafNodeTaxonContainer)container;
                        Object targetItemId = dropData.getItemIdOver();
                        String toName = (String)targetContainer.getProperty(targetItemId, LeafNodeTaxonContainer.NAME_ID).getValue();

                        fromTaxonIun = new IdUuidName(sourceItemId,
                                sourceContainer.getUuid(sourceItemId),
                                fromName);
                        toTaxonIun = new IdUuidName(targetItemId,
                                targetContainer.getUuid(targetItemId),
                                toName);
                        CdmVaadinSessionUtilities.getCurrentSelectionService()
                        .fireSelectionEvent(new SelectionEvent(Arrays.asList(fromTaxonIun, sourceSc.getSelectedClassificationUuid()), StatusComposite.class), false);
                        EditConceptRelationshipComposite.showInDialog(ConceptRelationshipComposite.CREATE_NEW_CR_TITLE,
                                fromTaxonIun,
                                null,
                                toTaxonIun,
                                CdmChangeEvent.Action.Create,
                                direction);
                    }
                }

            }

        }

    }
}
