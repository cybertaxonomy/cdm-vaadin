package eu.etaxonomy.cdm.vaadin.view.dbstatus;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.event.ContextClickEvent;
import com.vaadin.event.ContextClickEvent.ContextClickListener;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutAction.ModifierKey;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.Window;

import eu.etaxonomy.cdm.api.conversation.ConversationHolder;
import eu.etaxonomy.cdm.hibernate.HibernateProxyHelper;
import eu.etaxonomy.cdm.model.common.Language;
import eu.etaxonomy.cdm.model.common.Representation;
import eu.etaxonomy.cdm.model.description.DescriptionElementBase;
import eu.etaxonomy.cdm.model.description.PresenceAbsenceTerm;
import eu.etaxonomy.cdm.model.taxon.Taxon;
import eu.etaxonomy.cdm.vaadin.component.DetailWindow;
import eu.etaxonomy.cdm.vaadin.component.HorizontalToolbar;
import eu.etaxonomy.cdm.vaadin.container.CdmSQLContainer;
import eu.etaxonomy.cdm.vaadin.container.PresenceAbsenceTermContainer;
import eu.etaxonomy.cdm.vaadin.presenter.dbstatus.DistributionTablePresenter;
import eu.etaxonomy.cdm.vaadin.util.CdmQueryFactory;
import eu.etaxonomy.cdm.vaadin.util.DistributionEditorUtil;
import eu.etaxonomy.cdm.vaadin.util.TermCacher;

public class DistributionTableView extends CustomComponent implements View{

	private static final long serialVersionUID = 1L;
    private HorizontalToolbar toolbar;
	private Table table;

	private DistributionTablePresenter listener;

	private List<String> columnList;
	private ArrayList<String> headerList;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DistributionTableView() {
		AbsoluteLayout mainLayout = initLayout();
		setCompositionRoot(mainLayout);
		createEditClickListener();

	}

	private AbsoluteLayout initLayout() {
		AbsoluteLayout mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		setWidth("100.0%");
		setHeight("100.0%");

		//Horizontal Toolbar
		toolbar = new HorizontalToolbar();
		mainLayout.addComponent(toolbar, "top:0.0px;right:0.0px;");

		// table
		table = new Table();
		table.setImmediate(false);
		table.setWidth("100.0%");
		table.setHeight("100.0%");
		mainLayout.addComponent(table, "top:75px;right:0.0px;");
		return mainLayout;
	}

	public void addListener(DistributionTablePresenter listener) {
	   this.listener = listener;
	}

	@Override
	public void enter(ViewChangeEvent event) {
		CdmSQLContainer container = null;
		try {
			container = listener.getSQLContainer();
		} catch (SQLException e) {
			Notification.show("Error while accessing data base", Type.ERROR_MESSAGE);
			e.printStackTrace();
			return;
		}

		table.setContainerDataSource(container);
		table.setColumnReorderingAllowed(true);
		table.setSortEnabled(true);

		columnList = new ArrayList<String>(Arrays.asList(new String[]{CdmQueryFactory.TAXON_COLUMN,CdmQueryFactory.RANK_COLUMN}));
		List<String> namedAreas = listener.getNamedAreasLabels();
		columnList.addAll(namedAreas);
		table.setVisibleColumns(columnList.toArray());

		headerList = new ArrayList<String>(Arrays.asList(new String[]{CdmQueryFactory.TAXON_COLUMN,"Rang"}));
		headerList.addAll(listener.getNamedAreasLabels());
		String[] string = new String[headerList.size()];
		table.setColumnHeaders(headerList.toArray(string));

//		table.setColumnExpandRatio(propertyId, expandRatio);
		table.setColumnCollapsingAllowed(true);
		table.setSelectable(true);
		table.setPageLength(20);
		table.setFooterVisible(true);
		table.setColumnFooter(CdmQueryFactory.TAXON_COLUMN, "Total amount of Taxa displayed: " + container.size());

		table.setCacheRate(20);
		
		//add generated columns for NamedAreas
		Collection<?> containerPropertyIds = table.getContainerPropertyIds();
		for (Object object : containerPropertyIds) {
			if(namedAreas.contains(object)){
				table.removeGeneratedColumn(object);
				table.addGeneratedColumn(object, new AreaColumnGenerator());
			}
		}
	}

	private void createEditClickListener(){
		Button detailButton = toolbar.getDetailButton();
		detailButton.setCaption("Detail View");
		detailButton.addClickListener(new ClickListener() {

			private static final long serialVersionUID = 1479133195403139547L;

			@Override
			public void buttonClick(ClickEvent event) {
				Object selectedItemId = DistributionTableView.this.table.getValue();
				if(selectedItemId!=null){
					final UUID uuid = UUID.fromString(table.getItem(selectedItemId).getItemProperty("uuid").getValue().toString());
					Taxon taxon = HibernateProxyHelper.deproxy(listener.getTaxonService().load(uuid), Taxon.class);
					List<DescriptionElementBase> listDescriptions = listener.listDescriptionElementsForTaxon(taxon, null);
					DetailWindow dw = new DetailWindow(taxon, listDescriptions);
					Window window = dw.createWindow();
					getUI().addWindow(window);
				}
				else{
					Notification.show("Please select a taxon", Type.HUMANIZED_MESSAGE);
				}
			}
		});

		Button settingsButton = toolbar.getSettingsButton();
		settingsButton.addClickListener(new ClickListener() {

			private static final long serialVersionUID = 3834048719431837966L;

			@Override
            public void buttonClick(ClickEvent event) {
                SettingsConfigWindow cw = new SettingsConfigWindow();
                Window window  = cw.createWindow();
                getUI().addWindow(window);
            }
        });

		Button saveButton = toolbar.getSaveButton();
		saveButton.setClickShortcut(KeyCode.S, ModifierKey.CTRL);
		saveButton.setDescription("Shortcut: CTRL+S");
		saveButton.setCaption("Save Data");
		saveButton.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 1L;
			@Override
			public void buttonClick(ClickEvent event) {
				ConversationHolder conversationHolder = (ConversationHolder) VaadinSession.getCurrent().getAttribute(DistributionEditorUtil.SATTR_CONVERSATION);
				try{
					conversationHolder.commit();
				}catch(Exception stateException){
					//TODO create Table without DTO
				}
				Notification.show("Data saved", Notification.Type.HUMANIZED_MESSAGE);
			}
		});

	}

    private final class AreaColumnGenerator implements ColumnGenerator {
        private static final long serialVersionUID = 1L;

        @Override
        public Object generateCell(Table source, Object itemId, Object columnId) {
            Property<?> containerProperty = source.getContainerProperty(itemId, columnId);
            Object value = null;
            if(containerProperty != null){
                value = containerProperty.getValue();
            }
            final UUID uuid = UUID.fromString(table.getItem(itemId).getItemProperty("uuid").getValue().toString());
            final ComboBox box = new ComboBox("Occurrence Status: ", PresenceAbsenceTermContainer.getInstance());
            final String area = columnId.toString();
            box.setImmediate(true);
            box.setBuffered(true);
            box.setSizeFull();
            PresenceAbsenceTerm presenceAbsenceTerm = TermCacher.getInstance().getPresenceAbsenceTerm((String)value);
			box.setValue(presenceAbsenceTerm);
			if(presenceAbsenceTerm!=null){
				String itemCaption = null;
				Representation representation = presenceAbsenceTerm.getRepresentation(Language.DEFAULT());
				if(representation!=null){
					if(DistributionEditorUtil.isAbbreviatedLabels()){
						itemCaption = representation.getAbbreviatedLabel();
					}
					else{
						itemCaption = representation.getLabel();
					}
				}
				if(itemCaption==null){
					itemCaption = presenceAbsenceTerm.getTitleCache();
				}
				box.setItemCaption(presenceAbsenceTerm, itemCaption);
			}
            box.addValueChangeListener(new ValueChangeListener() {
                private static final long serialVersionUID = 6221534597911674067L;

                @Override
                public void valueChange(ValueChangeEvent event) {
                    Taxon taxon = HibernateProxyHelper.deproxy(listener.getTaxonService().load(uuid), Taxon.class);
                    listener.updateDistributionField(area, box.getValue(), taxon);
                }
            });
            return box;
        }
    }

}
