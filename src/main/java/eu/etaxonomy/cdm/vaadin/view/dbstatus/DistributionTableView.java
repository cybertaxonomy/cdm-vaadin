package eu.etaxonomy.cdm.vaadin.view.dbstatus;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;

import eu.etaxonomy.cdm.model.common.CdmBase;
import eu.etaxonomy.cdm.model.common.DefinedTermBase;
import eu.etaxonomy.cdm.model.description.DescriptionElementBase;
import eu.etaxonomy.cdm.model.description.Distribution;
import eu.etaxonomy.cdm.model.description.Feature;
import eu.etaxonomy.cdm.model.description.PresenceAbsenceTerm;
import eu.etaxonomy.cdm.model.description.TaxonDescription;
import eu.etaxonomy.cdm.model.location.NamedArea;
import eu.etaxonomy.cdm.model.taxon.Taxon;
import eu.etaxonomy.cdm.model.taxon.TaxonNode;
import eu.etaxonomy.cdm.vaadin.component.HorizontalToolbar;
import eu.etaxonomy.cdm.vaadin.model.LazyLoadedContainer;

public class DistributionTableView extends CustomComponent implements IDistributionTableComponent, View, ClickListener{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
     *
     */
    private static final long serialVersionUID = 1L;
    @AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Table table_1;
	
	private DistributionTableComponentListener listener;
	
	ArrayList<String> columnList;
	ArrayList<String> headerList;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DistributionTableView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		
	}
	
	@Override
	public void addListener(DistributionTableComponentListener listener) {
	   this.listener = listener;
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		//Horizontal Toolbar
		HorizontalToolbar bar = new HorizontalToolbar();
		mainLayout.addComponent(bar, "top:0.0px;right:0.0px;");
		
		// table_1
		table_1 = new Table();
		table_1.setImmediate(false);
		table_1.setWidth("100.0%");
		table_1.setHeight("100.0%");
		mainLayout.addComponent(table_1, "top:100px;right:0.0px;");

		return mainLayout;
	}

    /* (non-Javadoc)
     * @see com.vaadin.navigator.View#enter(com.vaadin.navigator.ViewChangeListener.ViewChangeEvent)
     */
    @Override
    public void enter(ViewChangeEvent event) {
        // TODO Auto-generated method stub

    }

    /* (non-Javadoc)
     * @see com.vaadin.ui.Button.ClickListener#buttonClick(com.vaadin.ui.Button.ClickEvent)
     */
    @Override
    public void buttonClick(ClickEvent event) {
        // TODO Auto-generated method stub

    }

    
	public void dataBinding(){

//		container.addNestedContainerProperty("dDTO.status");
		final LazyLoadedContainer container = listener.getLazyLoadedContainer();
		Set<DefinedTermBase> chosenTerms = listener.getChosenTerms();
		generateDsitributionColumn(chosenTerms);
		
		table_1.setContainerDataSource(container);
		table_1.setColumnReorderingAllowed(true);
		table_1.setSortEnabled(false);
//		setVisibleColumns(columns);
		Object[] visibleColumns = columnList.toArray();
		table_1.setVisibleColumns(visibleColumns);
		table_1.setColumnHeaders(headerList.toArray(new String[headerList.size()]));//new String[]{"Taxon", "Rang"});// ,"Deutschland"
		table_1.setColumnCollapsingAllowed(true);
		table_1.setSelectable(true);
//		table_1.setSizeUndefined();
//		setSizeFull();
		table_1.setPageLength(20);
		table_1.setFooterVisible(true);
		table_1.setColumnFooter("fullTitleCache", "Total amount of Taxa displayed: " + container.size());

		table_1.setCacheRate(10);
	}
    
    
    void generateDsitributionColumn(Set<DefinedTermBase> terms){
		columnList = new ArrayList<String>(Arrays.asList(new String[]{"fullTitleCache","rank"}));
		headerList = new ArrayList<String>(Arrays.asList(new String[]{"Taxon","Rang"}));
		for(final DefinedTermBase dt : terms){
			columnList.add(dt.getTitleCache());
			headerList.add(dt.getTitleCache());
//			container.addContainerProperty(dt.getTitleCache(), String.class, null);
			
			table_1.addContainerProperty(dt.getTitleCache(), String.class, null);
			try{
				table_1.addGeneratedColumn(dt.getTitleCache(), new ColumnGenerator() {
					public Object generateCell(Table source, Object itemId, Object columnId) {
						Label tf = new Label();
						ComboBox box = null;
						if(itemId instanceof TaxonNode){
							TaxonNode tn = CdmBase.deproxy((TaxonNode) itemId, TaxonNode.class);
							Taxon taxon = CdmBase.deproxy(tn.getTaxon(), Taxon.class);
							taxon = (Taxon) listener.getTaxonService().load(taxon.getUuid());
							HashMap<DescriptionElementBase, Distribution> map = getDistribution(taxon);
							
							List<PresenceAbsenceTerm> listTerm = listener.getPresenceAbsenceTerms();
							BeanItemContainer<PresenceAbsenceTerm> termContainer = new BeanItemContainer<PresenceAbsenceTerm>(PresenceAbsenceTerm.class);
							termContainer.addAll(listTerm);
							box = new ComboBox("Occurrence Status: ", termContainer);
							box.setImmediate(true);
							
							if(map != null){
								/** update field **/
								DescriptionElementBase deb = null; 
								Distribution db = null;
								for(Map.Entry<DescriptionElementBase, Distribution> entry : map.entrySet()){
									deb = entry.getKey();
									db = entry.getValue();
								}
								if(table_1.isEditable()){
									box = updateDistributionField(deb, db, termContainer, box, taxon);
								}else{
									if(db.getStatus() != null){
									tf.setValue(db.getStatus().toString());
									}else{
										//FIXME: case for delete?
										Notification.show("Possible Error for " +taxon.getTitleCache() + " for Distribution: " + db.getArea().getTitleCache(), Notification.Type.TRAY_NOTIFICATION);
										tf.setValue("-");
									}
								}
							}else{
								/** create distribution if it does not exist and set the status **/
								if(table_1.isEditable()){
									box = createDistributionField(taxon, termContainer, box);
								}else{
									tf.setValue("-");
								}
							}
							
						}
						
						if(table_1.isEditable()){
							return box;
						}else{
							return tf;
						}
					}

					private ComboBox createDistributionField(
							final Taxon taxon,
							BeanItemContainer<PresenceAbsenceTerm> termContainer,ComboBox box) {
						final ComboBox box2 = box;
						box.addValueChangeListener(new ValueChangeListener() {

							@Override
							public void valueChange(com.vaadin.data.Property.ValueChangeEvent event) {
								NamedArea area = (NamedArea) dt;
								Distribution db = Distribution.NewInstance(area, (PresenceAbsenceTerm) box2.getValue());
					               Set<TaxonDescription> descriptions = taxon.getDescriptions();
				                    if (descriptions != null) {
				                        for (TaxonDescription desc : descriptions) {
				                            // add to first taxon description
				                            desc.addElement(db);
											listener.getDescriptionService().saveOrUpdate(desc);
				                            break;
				                        }
				                    } else {// there are no TaxonDescription yet.
				                        TaxonDescription td = TaxonDescription.NewInstance(taxon);
				                        td.addElement(db);
				                        taxon.addDescription(td);
				                        listener.getTaxonService().saveOrUpdate(taxon);
				                    }
							}
						
						});
						
						
						return box;
					}

					private HashMap<DescriptionElementBase, Distribution> getDistribution(Taxon taxon){
						Set<Feature> setFeature = new HashSet<Feature>(Arrays.asList(Feature.DISTRIBUTION()));
						List<DescriptionElementBase> listTaxonDescription = listener.listDescriptionElementsForTaxon(taxon, setFeature);
						for(DescriptionElementBase deb : listTaxonDescription){
							if(deb instanceof Distribution){
								Distribution db = (Distribution)deb;
								String titleCache = dt.getTitleCache();
								if(db.getArea().getTitleCache().equalsIgnoreCase(titleCache)){
									HashMap<DescriptionElementBase, Distribution> map = new HashMap<DescriptionElementBase, Distribution>();
									map.put(deb, db);
									return map;
								}
							}
						}
						return null;
					}
					
					private ComboBox updateDistributionField(DescriptionElementBase deb, Distribution db, BeanItemContainer<PresenceAbsenceTerm> termContainer, ComboBox box, Taxon taxon) {
						final Distribution db2 = db;
						final DescriptionElementBase deb2 = deb;
						box.setValue(db.getStatus());
						final ComboBox box2 = box;
						final Taxon taxon2 = taxon;
						box.addValueChangeListener(new ValueChangeListener() {
							
							private static final long serialVersionUID = 1L;

							@Override
							public void valueChange(com.vaadin.data.Property.ValueChangeEvent event) {
								if(box2.getValue() == null){//delete descriptionElementBase
									listener.getDescriptionService().deleteDescriptionElement(deb2);
									listener.getTaxonService().saveOrUpdate(taxon2);
									Notification.show("Delete Status", Notification.Type.TRAY_NOTIFICATION);
								}else{
									db2.setStatus((PresenceAbsenceTerm)box2.getValue());
									listener.getDescriptionService().saveDescriptionElement(deb2);
									Notification.show("DescriptionService wrote", Notification.Type.TRAY_NOTIFICATION);
								}
							}
						});
						return box;
					}
				});
			}catch(IllegalArgumentException e){
				e.printStackTrace();
			}
		}	
    }
}
