package eu.etaxonomy.cdm.vaadin.view.dbstatus;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutAction.ModifierKey;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import eu.etaxonomy.cdm.api.conversation.ConversationHolder;
import eu.etaxonomy.cdm.hibernate.HibernateProxyHelper;
import eu.etaxonomy.cdm.model.common.Language;
import eu.etaxonomy.cdm.model.common.Representation;
import eu.etaxonomy.cdm.model.description.DescriptionElementBase;
import eu.etaxonomy.cdm.model.description.PresenceAbsenceTerm;
import eu.etaxonomy.cdm.model.taxon.Taxon;
import eu.etaxonomy.cdm.vaadin.component.DetailWindow;
import eu.etaxonomy.cdm.vaadin.component.HorizontalToolbar;
import eu.etaxonomy.cdm.vaadin.container.CdmSQLContainer;
import eu.etaxonomy.cdm.vaadin.container.PresenceAbsenceTermContainer;
import eu.etaxonomy.cdm.vaadin.presenter.dbstatus.DistributionTablePresenter;
import eu.etaxonomy.cdm.vaadin.util.CdmQueryFactory;
import eu.etaxonomy.cdm.vaadin.util.DistributionEditorUtil;
import eu.etaxonomy.cdm.vaadin.util.TermCacher;

public class DistributionTableView extends CustomComponent implements View{

	private static final long serialVersionUID = 1L;
    private HorizontalToolbar toolbar;
	private Table table;

	private DistributionTablePresenter listener;

	private List<String> columnList;
	private ArrayList<String> headerList;
    private CdmSQLContainer container;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DistributionTableView() {
		AbsoluteLayout mainLayout = initLayout();
		setCompositionRoot(mainLayout);
		createEditClickListener();

	}

	private AbsoluteLayout initLayout() {
		AbsoluteLayout mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		setWidth("100.0%");
		setHeight("100.0%");

		//Horizontal Toolbar
		toolbar = new HorizontalToolbar();
		mainLayout.addComponent(toolbar, "top:0.0px;right:0.0px;");

		// table + formatting
		table = new Table(){
			private static final long serialVersionUID = -5148756917468804385L;

			@Override
			protected String formatPropertyValue(Object rowId, Object colId, Property<?> property) {
				String formattedValue = null;
				PresenceAbsenceTerm presenceAbsenceTerm = null;
				Object value = property.getValue();
				if(value instanceof String){
					presenceAbsenceTerm = TermCacher.getInstance().getPresenceAbsenceTerm((String) value);
				}
				if(presenceAbsenceTerm!=null){
					Representation representation = presenceAbsenceTerm.getRepresentation(Language.DEFAULT());
					if(representation!=null){
						if(DistributionEditorUtil.isAbbreviatedLabels()){
							formattedValue = representation.getAbbreviatedLabel();
						}
						else{
							formattedValue = representation.getLabel();
						}
					}
					if(formattedValue==null){
						formattedValue = presenceAbsenceTerm.getTitleCache();
					}
					return formattedValue;
				}
				return super.formatPropertyValue(rowId, colId, property);
			}
		};
		table.setImmediate(false);
		table.setWidth("100.0%");
		table.setHeight("100.0%");

        table.setColumnReorderingAllowed(true);
        table.setSortEnabled(true);
        
        table.setColumnCollapsingAllowed(true);
        table.setSelectable(true);
        table.setPageLength(20);
        table.setFooterVisible(true);
        table.setCacheRate(20);

		table.addItemClickListener(new ItemClickListener() {
            private static final long serialVersionUID = 2743935539139014771L;
            @Override
            public void itemClick(ItemClickEvent event) {
                if(!(event.getPropertyId().toString().equalsIgnoreCase(CdmQueryFactory.TAXON_COLUMN)) && !(event.getPropertyId().toString().equalsIgnoreCase(CdmQueryFactory.RANK_COLUMN))){
                    final Item item = event.getItem();
                    Property<?> itemProperty = item.getItemProperty("uuid");
                    UUID uuid = UUID.fromString(itemProperty.getValue().toString());
                    final Taxon taxon = HibernateProxyHelper.deproxy(listener.getTaxonService().load(uuid), Taxon.class);
                    final String areaID = (String) event.getPropertyId();

                    //popup window
                    final Window popup = new Window("Choose distribution status");
                    final ListSelect termSelect = new ListSelect();
                    termSelect.setSizeFull();
                    termSelect.setNullSelectionAllowed(false);
                    termSelect.setContainerDataSource(PresenceAbsenceTermContainer.getInstance());
                    Button btnOk = new Button("OK", new ClickListener() {
                        private static final long serialVersionUID = -3732219609337335697L;
                        @Override
                        public void buttonClick(ClickEvent event) {
                            Object distributionStatus = termSelect.getValue();
                            listener.updateDistributionField(areaID, distributionStatus, taxon);
                            container.refresh();
                            popup.close();
                        }
                    });
                    VerticalLayout layout = new VerticalLayout(termSelect, btnOk);
                    layout.setComponentAlignment(btnOk, Alignment.BOTTOM_RIGHT);
                    popup.setContent(layout);
                    popup.setModal(true);
                    popup.center();
                    UI.getCurrent().addWindow(popup);
                }
            }
        });


		mainLayout.addComponent(table, "top:75px;right:0.0px;");
		return mainLayout;
	}

	public void addListener(DistributionTablePresenter listener) {
	   this.listener = listener;
	}

	@Override
	public void enter(ViewChangeEvent event) {
		try {
			container = listener.getSQLContainer();
		} catch (SQLException e) {
			DistributionEditorUtil.showSqlError(e);
			return;
		}
		if(container==null){
			return;
		}

		table.setContainerDataSource(container);

		columnList = new ArrayList<String>(Arrays.asList(new String[]{CdmQueryFactory.TAXON_COLUMN,CdmQueryFactory.RANK_COLUMN}));
		List<String> namedAreas = listener.getNamedAreasLabels();
		columnList.addAll(namedAreas);
		table.setVisibleColumns(columnList.toArray());

		headerList = new ArrayList<String>(Arrays.asList(new String[]{CdmQueryFactory.TAXON_COLUMN,"Rang"}));
		headerList.addAll(listener.getNamedAreasLabels());
		String[] string = new String[headerList.size()];
		table.setColumnHeaders(headerList.toArray(string));

		table.setColumnFooter(CdmQueryFactory.TAXON_COLUMN, "Total amount of Taxa displayed: " + container.size());


	}

	private void createEditClickListener(){
		Button detailButton = toolbar.getDetailButton();
		detailButton.setCaption("Detail View");
		detailButton.addClickListener(new ClickListener() {

			private static final long serialVersionUID = 1479133195403139547L;

			@Override
			public void buttonClick(ClickEvent event) {
				Object selectedItemId = DistributionTableView.this.table.getValue();
				if(selectedItemId!=null){
					final UUID uuid = UUID.fromString(table.getItem(selectedItemId).getItemProperty("uuid").getValue().toString());
					Taxon taxon = HibernateProxyHelper.deproxy(listener.getTaxonService().load(uuid), Taxon.class);
					List<DescriptionElementBase> listDescriptions = listener.listDescriptionElementsForTaxon(taxon, null);
					DetailWindow detailWindow = new DetailWindow(taxon, listDescriptions);
					Window window = detailWindow.createWindow();
					window.center();
					getUI().addWindow(window);
				}
				else{
					Notification.show("Please select a taxon", Type.HUMANIZED_MESSAGE);
				}
			}
		});

		Button distributionSettingsButton = toolbar.getDistributionSettingsButton();
		distributionSettingsButton.addClickListener(new ClickListener() {

			private static final long serialVersionUID = -8695281619014251132L;

			@Override
            public void buttonClick(ClickEvent event) {
                openDistributionSettings();
            }
        });

		Button settingsButton = toolbar.getSettingsButton();
		settingsButton.addClickListener(new ClickListener() {

			private static final long serialVersionUID = -147703680580181544L;

			@Override
			public void buttonClick(ClickEvent event) {
				openSettings();
			}
		});

		Button saveButton = toolbar.getSaveButton();
		saveButton.setClickShortcut(KeyCode.S, ModifierKey.CTRL);
		saveButton.setDescription("Shortcut: CTRL+S");
		saveButton.setCaption("Save Data");
		saveButton.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 1L;
			@Override
			public void buttonClick(ClickEvent event) {
				ConversationHolder conversationHolder = (ConversationHolder) VaadinSession.getCurrent().getAttribute(DistributionEditorUtil.SATTR_CONVERSATION);
				try{
					conversationHolder.commit();
				}catch(Exception stateException){
					//TODO create Table without DTO
				}
				Notification.show("Data saved", Notification.Type.HUMANIZED_MESSAGE);
			}
		});

	}

	public void openSettings() {
		SettingsConfigWindow cw = new SettingsConfigWindow(this);
		Window window  = cw.createWindow();
		getUI().addWindow(window);
	}

	public void openDistributionSettings() {
		DistributionSettingsConfigWindow cw = new DistributionSettingsConfigWindow(this);
        Window window  = cw.createWindow();
        getUI().addWindow(window);
	}
	
}
