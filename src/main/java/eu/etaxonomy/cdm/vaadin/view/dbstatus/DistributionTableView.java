package eu.etaxonomy.cdm.vaadin.view.dbstatus;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutAction.ModifierKey;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.Window;

import eu.etaxonomy.cdm.api.conversation.ConversationHolder;
import eu.etaxonomy.cdm.model.description.DescriptionElementBase;
import eu.etaxonomy.cdm.model.description.PresenceAbsenceTerm;
import eu.etaxonomy.cdm.model.taxon.Taxon;
import eu.etaxonomy.cdm.vaadin.component.DetailWindow;
import eu.etaxonomy.cdm.vaadin.component.HorizontalToolbar;
import eu.etaxonomy.cdm.vaadin.container.CdmSQLContainer;
import eu.etaxonomy.cdm.vaadin.util.CdmQueryFactory;

public class DistributionTableView<E> extends CustomComponent implements IDistributionTableComponent, View{

    private final class AreaColumnGenerator implements ColumnGenerator {
		private static final long serialVersionUID = 1L;

		@Override
		public Object generateCell(Table source, Object itemId, Object columnId) {
		    Property containerProperty = source.getContainerProperty(itemId, columnId);
		    Object value = null;
		    if(containerProperty != null){
		        value = containerProperty.getValue();
		    }
		    final UUID uuid = UUID.fromString(table.getItem(itemId).getItemProperty("uuid").getValue().toString());
		    final ComboBox box = new ComboBox("Occurrence Status: ", listener.getPresenceAbsenceContainer());
		    final String area = columnId.toString();
		    box.setImmediate(true);
		    box.setBuffered(true);
		    box.setValue(compareObjectToPAT(value));
		    box.addValueChangeListener(new ValueChangeListener() {
		        @Override
		        public void valueChange(ValueChangeEvent event) {
		            Taxon taxon = (Taxon)listener.getTaxonService().load(uuid);
		            listener.updateDistributionField(area, box.getValue(), taxon);
		        }
		    });
		    return box;
		}
	}

	private static final long serialVersionUID = 1L;
    private HorizontalToolbar toolbar;
	private Table table;

	private Taxon currentTaxon;

	private DistributionTableComponentListener listener;

	private List<String> columnList;
	private ArrayList<String> headerList;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DistributionTableView() {
		AbsoluteLayout mainLayout = initLayout();
		setCompositionRoot(mainLayout);
		createEditClickListener();

	}

	private AbsoluteLayout initLayout() {
		AbsoluteLayout mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		setWidth("100.0%");
		setHeight("100.0%");

		//Horizontal Toolbar
		toolbar = new HorizontalToolbar();
		mainLayout.addComponent(toolbar, "top:0.0px;right:0.0px;");
		
		// table
		table = new Table();
		table.setImmediate(false);
		table.setWidth("100.0%");
		table.setHeight("100.0%");
		mainLayout.addComponent(table, "top:75px;right:0.0px;");
		return mainLayout;
	}

	@Override
	public void addListener(DistributionTableComponentListener listener) {
	   this.listener = listener;
	}

    @Override
    public void enter(ViewChangeEvent event) {
    }

	public void dataBinding() throws SQLException{
		CdmSQLContainer container = listener.getSQLContainer();

		table.setContainerDataSource(container);
		table.setColumnReorderingAllowed(true);
		table.setSortEnabled(true);

		columnList = new ArrayList<String>(Arrays.asList(new String[]{CdmQueryFactory.TAXON_COLUMN,CdmQueryFactory.RANK_COLUMN}));
		List<String> termList = listener.getTermList();
		columnList.addAll(termList);
		Object[] visibleColumns = columnList.toArray();
		table.setVisibleColumns(visibleColumns);

		headerList = new ArrayList<String>(Arrays.asList(new String[]{CdmQueryFactory.TAXON_COLUMN,"Rang"}));
		headerList.addAll(listener.getAbbreviatedTermList());

		table.setColumnCollapsingAllowed(true);
		table.setSelectable(true);
		table.setPageLength(20);
		table.setFooterVisible(true);
		table.setColumnFooter(CdmQueryFactory.TAXON_COLUMN, "Total amount of Taxa displayed: " + container.size());

		table.setCacheRate(20);
		
		//add generated columns for NamedAreas
		Collection<?> containerPropertyIds = table.getContainerPropertyIds();
		for (Object object : containerPropertyIds) {
			if(termList.contains(object)){
				  table.addGeneratedColumn(object, new AreaColumnGenerator());
			}
		}
	}


	private void createEditClickListener(){
		Button detailButton = toolbar.getDetailButton();
		detailButton.setCaption("Detail View");
		detailButton.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				try{
					if(currentTaxon != null){
						List<DescriptionElementBase> listDescriptions = listener.listDescriptionElementsForTaxon(currentTaxon, null);
						DetailWindow dw = new DetailWindow(currentTaxon, listDescriptions);
						Window window = dw.createWindow();
						getUI().addWindow(window);
					}else{
						Notification.show("Please select a Taxon.", Notification.Type.HUMANIZED_MESSAGE);
					}
				}catch(Exception e){
					Notification.show("Unexpected Error, \n\n Please log in again!", Notification.Type.WARNING_MESSAGE);
				}
			}
		});

		Button settingsButton = toolbar.getSettingsButton();
		settingsButton.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                SettingsConfigWindow cw = new SettingsConfigWindow();
                Window window  = cw.createWindow();
                getUI().addWindow(window);
            }
        });

		Button saveButton = toolbar.getSaveButton();
		saveButton.setClickShortcut(KeyCode.S, ModifierKey.CTRL);
		saveButton.setDescription("Shortcut: CTRL+S");
		saveButton.setCaption("Save Data");
		saveButton.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 1L;
			@Override
			public void buttonClick(ClickEvent event) {
				ConversationHolder conversationHolder = (ConversationHolder) VaadinSession.getCurrent().getAttribute("conversation");
				try{
					conversationHolder.commit();
				}catch(Exception stateException){
					//TODO create Table without DTO
				}
				Notification.show("Data saved", Notification.Type.HUMANIZED_MESSAGE);
			}
		});

	}

	private PresenceAbsenceTerm compareObjectToPAT(Object object){
	    List<PresenceAbsenceTerm> presenceAbsenceTerms = listener.getPresenceAbsenceTerms();
	    for(PresenceAbsenceTerm term:presenceAbsenceTerms){
	        if(term.getTitleCache().equals(object)){
	            return term;
	        }
	    }
	    return null;
	}

}
