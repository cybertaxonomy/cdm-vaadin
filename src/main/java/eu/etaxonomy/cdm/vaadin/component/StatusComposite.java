// $Id$
/**
 * Copyright (C) 2015 EDIT
 * European Distributed Institute of Taxonomy
 * http://www.e-taxonomy.eu
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * See LICENSE.TXT at the top of this package for the full license terms.
 */
package eu.etaxonomy.cdm.vaadin.component;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.sqlcontainer.RowId;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import eu.etaxonomy.cdm.vaadin.view.IStatusComposite;

/**
 * @author cmathew
 * @date 11 Mar 2015
 *
 */
public class StatusComposite extends CustomComponent implements IStatusComposite {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private GridLayout mainLayout;
    @AutoGenerated
    private Table taxaTreeTable;
    @AutoGenerated
    private TextField searchTextField;
    @AutoGenerated
    private VerticalLayout filterVerticalLayout;
    @AutoGenerated
    private ListSelect filterListSelect;
    @AutoGenerated
    private NativeSelect filterNativeSelect;
    @AutoGenerated
    private ComboBox classificationComboBox;
    private static final Logger logger = Logger.getLogger(StatusComposite.class);
    private StatusComponentListener listener;
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public StatusComposite() {
        buildMainLayout();
        setCompositionRoot(mainLayout);


        addUIListeners();
    }

    public void init() {
        initClassificationComboBox();
    }

    private void initTaxaTable(int classificationId) {

        if(listener != null) {
            List<String> columnIds = new ArrayList<String>();
            columnIds.add("Name");
            taxaTreeTable.setColumnExpandRatio("Name", 1);
            columnIds.add("Pb");
            taxaTreeTable.setColumnWidth("Pb", 10);
            taxaTreeTable.addGeneratedColumn("Pb", new BooleanCheckBoxGenerator());
            try {
                taxaTreeTable.setContainerDataSource(listener.loadTaxa(classificationId), columnIds);
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }

    private void initClassificationComboBox() {

        classificationComboBox.setNewItemsAllowed(false);
        classificationComboBox.setNullSelectionAllowed(false);
        classificationComboBox.setImmediate(true);
        classificationComboBox.setItemCaptionPropertyId("titleCache");
        classificationComboBox.setInputPrompt("Select classification ...");
        if(listener != null) {
            try {
                classificationComboBox.setContainerDataSource(listener.loadClassifications());
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }



        }

    }

    private void addUIListeners() {
        addClassificationComboBoxListener();
    }

    private void addClassificationComboBoxListener() {

        classificationComboBox.addValueChangeListener(new Property.ValueChangeListener() {

            private static final long serialVersionUID = 4196786323147791606L;

            @Override
            public void valueChange(ValueChangeEvent event) {
                if (classificationComboBox.getValue() != null) {
                    Object selected = classificationComboBox.getValue();
                    logger.info("selected : " + selected);
                    int classificationId = (Integer)((RowId)selected).getId()[0];
                    initTaxaTable(classificationId);
                }
            }
        });
    }

    /* (non-Javadoc)
     * @see eu.etaxonomy.cdm.vaadin.view.IStatusComponent#setListener(eu.etaxonomy.cdm.vaadin.view.IStatusComponent.StatusComponentListener)
     */
    @Override
    public void setListener(StatusComponentListener listener) {
        this.listener = listener;
    }


    class BooleanCheckBoxGenerator implements Table.ColumnGenerator {
        /**
         * Generates the cell containing an open image when boolean is true
         */
        @Override
        public Component generateCell(Table source, Object itemId, Object columnId) {
            Property prop = source.getItem(itemId).getItemProperty(columnId);
            return new CheckBox(null, prop);
        }
    }


    @AutoGenerated
    private GridLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new GridLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("260px");
        mainLayout.setHeight("820px");
        mainLayout.setMargin(true);
        mainLayout.setSpacing(true);
        mainLayout.setRows(4);

        // top-level component properties
        setWidth("260px");
        setHeight("820px");

        // classificationComboBox
        classificationComboBox = new ComboBox();
        classificationComboBox.setImmediate(false);
        classificationComboBox.setWidth("100.0%");
        classificationComboBox.setHeight("-1px");
        mainLayout.addComponent(classificationComboBox, 0, 0);
        mainLayout.setComponentAlignment(classificationComboBox, new Alignment(20));

        // filterVerticalLayout
        filterVerticalLayout = buildFilterVerticalLayout();
        mainLayout.addComponent(filterVerticalLayout, 0, 1);

        // searchTextField
        searchTextField = new TextField();
        searchTextField.setImmediate(false);
        searchTextField.setWidth("100.0%");
        searchTextField.setHeight("-1px");
        mainLayout.addComponent(searchTextField, 0, 2);
        mainLayout.setComponentAlignment(searchTextField, new Alignment(20));

        // taxaTreeTable
        taxaTreeTable = new Table();
        taxaTreeTable.setImmediate(false);
        taxaTreeTable.setWidth("100.0%");
        taxaTreeTable.setHeight("100.0%");
        mainLayout.addComponent(taxaTreeTable, 0, 3);
        mainLayout.setComponentAlignment(taxaTreeTable, new Alignment(20));

        return mainLayout;
    }

    @AutoGenerated
    private VerticalLayout buildFilterVerticalLayout() {
        // common part: create layout
        filterVerticalLayout = new VerticalLayout();
        filterVerticalLayout.setImmediate(false);
        filterVerticalLayout.setWidth("100.0%");
        filterVerticalLayout.setHeight("-1px");
        filterVerticalLayout.setMargin(false);

        // filterNativeSelect
        filterNativeSelect = new NativeSelect();
        filterNativeSelect.setImmediate(false);
        filterNativeSelect.setWidth("100.0%");
        filterNativeSelect.setHeight("-1px");
        filterVerticalLayout.addComponent(filterNativeSelect);
        filterVerticalLayout.setComponentAlignment(filterNativeSelect, new Alignment(20));

        // filterListSelect
        filterListSelect = new ListSelect();
        filterListSelect.setImmediate(false);
        filterListSelect.setWidth("100.0%");
        filterListSelect.setHeight("110px");
        filterVerticalLayout.addComponent(filterListSelect);
        filterVerticalLayout.setComponentAlignment(filterListSelect, new Alignment(20));

        return filterVerticalLayout;
    }

}
