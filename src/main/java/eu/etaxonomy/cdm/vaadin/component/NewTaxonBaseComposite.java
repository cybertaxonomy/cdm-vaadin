// $Id$
/**
 * Copyright (C) 2015 EDIT
 * European Distributed Institute of Taxonomy
 * http://www.e-taxonomy.eu
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * See LICENSE.TXT at the top of this package for the full license terms.
 */
package eu.etaxonomy.cdm.vaadin.component;

import java.util.Arrays;

import org.apache.log4j.Logger;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Validator.EmptyValueException;
import com.vaadin.data.util.sqlcontainer.RowId;
import com.vaadin.server.Page;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import eu.etaxonomy.cdm.vaadin.container.IdUuidName;
import eu.etaxonomy.cdm.vaadin.session.CdmChangeEvent;
import eu.etaxonomy.cdm.vaadin.session.CdmChangeEvent.Action;
import eu.etaxonomy.cdm.vaadin.util.CdmVaadinOperation;
import eu.etaxonomy.cdm.vaadin.util.CdmVaadinUtilities;
import eu.etaxonomy.cdm.vaadin.view.INewTaxonBaseComponentListener;
import eu.etaxonomy.cdm.vaadin.view.INewTaxonBaseComposite;

/**
 * @author cmathew
 * @date 2 Apr 2015
 *
 */
public class NewTaxonBaseComposite extends CustomComponent implements INewTaxonBaseComposite {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private VerticalLayout mainLayout;
    @AutoGenerated
    private CdmProgressComponent cdmProgressComponent;
    @AutoGenerated
    private HorizontalLayout horizontalLayout;
    @AutoGenerated
    private Button cancelButton;
    @AutoGenerated
    private Button saveButton;
    @AutoGenerated
    private GridLayout gridLayout;
    @AutoGenerated
    private Label accTaxonNameValue;
    @AutoGenerated
    private ComboBox secComboBox;
    @AutoGenerated
    private Label secLabel;
    @AutoGenerated
    private TextField nameTextField;
    @AutoGenerated
    private Label nameLabel;
    @AutoGenerated
    private Label accTaxonLabel;
    private INewTaxonBaseComponentListener listener;


    private final Window dialog;
    private final IdUuidName accTaxonIdUuid;
    private final IdUuidName classificationIdUuid;

    private static final Logger logger = Logger.getLogger(NewTaxonBaseComposite.class);

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public NewTaxonBaseComposite(Window dialog,
            INewTaxonBaseComponentListener listener,
            IdUuidName accTaxonIdUuid,
            String accTaxonName,
            IdUuidName classificationIdUuid) {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        this.listener = listener;
        this.dialog = dialog;
        this.accTaxonIdUuid = accTaxonIdUuid;
        this.classificationIdUuid = classificationIdUuid;

        addUIListeners();

        if(accTaxonName == null || accTaxonName.isEmpty()) {
            accTaxonLabel.setVisible(false);
            accTaxonNameValue.setVisible(false);
        } else {
            accTaxonNameValue.setValue(accTaxonName);
        }
        init();
    }

    public void init() {
        initSecComboBox();
    }

    private void initSecComboBox() {

        secComboBox.setNullSelectionAllowed(false);
        secComboBox.setItemCaptionPropertyId("titleCache");
        secComboBox.setImmediate(true);
        if(listener != null) {
            secComboBox.setContainerDataSource(listener.getSecRefContainer());
        }
    }

    private void addUIListeners() {
        addSaveButtonListener();
        addCancelButtonListener();
    }

    private void addSaveButtonListener() {
        saveButton.addClickListener(new Button.ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                try {
                    nameTextField.validate();
                    secComboBox.validate();
                } catch (EmptyValueException e) {
                    Notification notification = new Notification("Invalid input", "Neither Name or Secundum can be empty", Type.WARNING_MESSAGE);
                    notification.setDelayMsec(2000);
                    notification.show(Page.getCurrent());
                    return;
                }

                CdmVaadinUtilities.setEnabled(mainLayout, false, null);

                CdmVaadinUtilities.exec(new CdmVaadinOperation(1000, cdmProgressComponent) {
                    @Override
                    public boolean execute() {
                        setProgress("Saving Taxon " + nameTextField.getValue());
                        IdUuidName taxonBaseIdUuid;
                        if(accTaxonIdUuid == null) {
                            taxonBaseIdUuid = listener.newTaxon(nameTextField.getValue(),secComboBox.getValue(), classificationIdUuid.getUuid());
                        } else {
                            taxonBaseIdUuid = listener.newSynonym(nameTextField.getValue(),secComboBox.getValue(), accTaxonIdUuid.getUuid());
                        }
                        Object rowId = new RowId(taxonBaseIdUuid.getId());
                        registerDelayedEvent(new CdmChangeEvent(Action.Create, Arrays.asList(rowId), NewTaxonBaseComposite.class));
                        return true;
                    }

                    @Override
                    public void postOpUIUpdate(boolean success) {
                        if(success) {
                            UI.getCurrent().removeWindow(dialog);
                        } else {
                            CdmVaadinUtilities.setEnabled(mainLayout, true, null);
                        }
                    }
                });
            }
        });
    }

    private void addCancelButtonListener() {
        cancelButton.addClickListener(new Button.ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                UI.getCurrent().removeWindow(dialog);
            }

        });
    }

    /* (non-Javadoc)
     * @see eu.etaxonomy.cdm.vaadin.view.INewTaxonComposite#setListener(eu.etaxonomy.cdm.vaadin.view.INewTaxonBaseComponentListener)
     */
    @Override
    public void setListener(INewTaxonBaseComponentListener listener) {
        this.listener = listener;

    }

    @AutoGenerated
    private VerticalLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("340px");
        mainLayout.setHeight("200px");
        mainLayout.setMargin(true);

        // top-level component properties
        setWidth("340px");
        setHeight("200px");

        // gridLayout
        gridLayout = buildGridLayout();
        mainLayout.addComponent(gridLayout);
        mainLayout.setExpandRatio(gridLayout, 1.0f);

        // horizontalLayout
        horizontalLayout = buildHorizontalLayout();
        mainLayout.addComponent(horizontalLayout);
        mainLayout.setComponentAlignment(horizontalLayout, new Alignment(20));

        // cdmProgressComponent
        cdmProgressComponent = new CdmProgressComponent();
        cdmProgressComponent.setImmediate(false);
        cdmProgressComponent.setWidth("-1px");
        cdmProgressComponent.setHeight("-1px");
        mainLayout.addComponent(cdmProgressComponent);
        mainLayout.setComponentAlignment(cdmProgressComponent, new Alignment(48));

        return mainLayout;
    }

    @AutoGenerated
    private GridLayout buildGridLayout() {
        // common part: create layout
        gridLayout = new GridLayout();
        gridLayout.setImmediate(false);
        gridLayout.setWidth("-1px");
        gridLayout.setHeight("-1px");
        gridLayout.setMargin(false);
        gridLayout.setSpacing(true);
        gridLayout.setColumns(2);
        gridLayout.setRows(4);

        // accTaxonLabel
        accTaxonLabel = new Label();
        accTaxonLabel.setImmediate(false);
        accTaxonLabel.setWidth("-1px");
        accTaxonLabel.setHeight("-1px");
        accTaxonLabel.setValue("Acc. Taxon : ");
        gridLayout.addComponent(accTaxonLabel, 0, 0);
        gridLayout.setComponentAlignment(accTaxonLabel, new Alignment(34));

        // nameLabel
        nameLabel = new Label();
        nameLabel.setImmediate(false);
        nameLabel.setWidth("-1px");
        nameLabel.setHeight("-1px");
        nameLabel.setValue("Name : ");
        gridLayout.addComponent(nameLabel, 0, 1);
        gridLayout.setComponentAlignment(nameLabel, new Alignment(34));

        // nameTextField
        nameTextField = new TextField();
        nameTextField.setImmediate(false);
        nameTextField.setWidth("190px");
        nameTextField.setHeight("-1px");
        nameTextField.setInvalidAllowed(false);
        nameTextField.setRequired(true);
        gridLayout.addComponent(nameTextField, 1, 1);
        gridLayout.setComponentAlignment(nameTextField, new Alignment(33));

        // secLabel
        secLabel = new Label();
        secLabel.setImmediate(false);
        secLabel.setWidth("-1px");
        secLabel.setHeight("-1px");
        secLabel.setValue("Secundum : ");
        gridLayout.addComponent(secLabel, 0, 2);
        gridLayout.setComponentAlignment(secLabel, new Alignment(34));

        // secComboBox
        secComboBox = new ComboBox();
        secComboBox.setImmediate(false);
        secComboBox.setWidth("190px");
        secComboBox.setHeight("-1px");
        secComboBox.setInvalidAllowed(false);
        secComboBox.setRequired(true);
        gridLayout.addComponent(secComboBox, 1, 2);
        gridLayout.setComponentAlignment(secComboBox, new Alignment(33));

        // accTaxonNameValue
        accTaxonNameValue = new Label();
        accTaxonNameValue.setImmediate(false);
        accTaxonNameValue.setWidth("-1px");
        accTaxonNameValue.setHeight("-1px");
        accTaxonNameValue.setValue("Taxon Name");
        gridLayout.addComponent(accTaxonNameValue, 1, 0);
        gridLayout.setComponentAlignment(accTaxonNameValue, new Alignment(33));

        return gridLayout;
    }

    @AutoGenerated
    private HorizontalLayout buildHorizontalLayout() {
        // common part: create layout
        horizontalLayout = new HorizontalLayout();
        horizontalLayout.setImmediate(false);
        horizontalLayout.setWidth("-1px");
        horizontalLayout.setHeight("-1px");
        horizontalLayout.setMargin(false);
        horizontalLayout.setSpacing(true);

        // saveButton
        saveButton = new Button();
        saveButton.setCaption("Save");
        saveButton.setImmediate(true);
        saveButton.setWidth("-1px");
        saveButton.setHeight("-1px");
        horizontalLayout.addComponent(saveButton);
        horizontalLayout.setComponentAlignment(saveButton, new Alignment(20));

        // cancelButton
        cancelButton = new Button();
        cancelButton.setCaption("Cancel");
        cancelButton.setImmediate(true);
        cancelButton.setWidth("-1px");
        cancelButton.setHeight("-1px");
        horizontalLayout.addComponent(cancelButton);
        horizontalLayout.setComponentAlignment(cancelButton, new Alignment(20));

        return horizontalLayout;
    }


}
