// $Id$
/**
* Copyright (C) 2015 EDIT
* European Distributed Institute of Taxonomy
* http://www.e-taxonomy.eu
*
* The contents of this file are subject to the Mozilla Public License Version 1.1
* See LICENSE.TXT at the top of this package for the full license terms.
*/
package eu.etaxonomy.cdm.vaadin.component;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.UUID;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container.Hierarchical;
import com.vaadin.data.Validator.EmptyValueException;
import com.vaadin.event.Transferable;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.acceptcriteria.AcceptAll;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.server.Page;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DragAndDropWrapper;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.TextField;
import com.vaadin.ui.TreeTable;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import eu.etaxonomy.cdm.vaadin.container.IdUuidName;
import eu.etaxonomy.cdm.vaadin.container.LeafNodeTaxonContainer;
import eu.etaxonomy.cdm.vaadin.presenter.EditConceptRelationshipPresenter;
import eu.etaxonomy.cdm.vaadin.session.CdmChangeEvent;
import eu.etaxonomy.cdm.vaadin.session.CdmChangeEvent.Action;
import eu.etaxonomy.cdm.vaadin.util.CdmVaadinOperation;
import eu.etaxonomy.cdm.vaadin.util.CdmVaadinUtilities;

/**
 * @author cmathew
 * @date 13 Apr 2015
 *
 */
public class EditConceptRelationshipComposite extends CustomComponent {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private VerticalLayout mainLayout;
    @AutoGenerated
    private CdmProgressComponent cdmProgressComponent;
    @AutoGenerated
    private HorizontalLayout saveCancelHLayout;
    @AutoGenerated
    private Button cancelButton;
    @AutoGenerated
    private Button saveButton;
    @AutoGenerated
    private HorizontalLayout horizontalLayout;
    @AutoGenerated
    private VerticalLayout typeVLayout;
    @AutoGenerated
    private ComboBox conceptRComboBox;
    @AutoGenerated
    private Label typeLabel;
    @AutoGenerated
    private VerticalLayout fromTaxonVLayout;
    @AutoGenerated
    private Label fromTaxonValue;
    @AutoGenerated
    private Label fromTaxonLabel;
    private VerticalLayout toTaxonVLayout;
    private Label toTaxonLabeL;
    private TextField toTaxonTextField;
    private DragAndDropWrapper toTaxonLayoutWrapper;

    private final EditConceptRelationshipPresenter presenter;

    private IdUuidName fromTaxonIdUuidName, taxonRTypeIdUuidName, toTaxonIdUuidName;

    private final Window dialog;

    private final static String CHOOSE_TREL_TYPE = "Choose Type ...";
    private final static String DRAG_TAXON_HINT = "Drag Taxon here ...";

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public EditConceptRelationshipComposite(Window dialog,
            IdUuidName fromTaxonIdUuidName,
            IdUuidName taxonRTypeIdUuidName,
            IdUuidName toTaxonIdUuidName) {

        buildMainLayout();
        buildToTaxon();
        setCompositionRoot(mainLayout);

        this.presenter = new EditConceptRelationshipPresenter();
        this.dialog = dialog;
        this.fromTaxonIdUuidName = fromTaxonIdUuidName;
        this.taxonRTypeIdUuidName = taxonRTypeIdUuidName;
        this.toTaxonIdUuidName = toTaxonIdUuidName;

        addUIListeners();
        init();
    }

    private void init() {
        initFromTaxonLabel();
        initConceptRComboBox();
        initToTaxon();
    }

    private void initFromTaxonLabel() {
        fromTaxonValue.setValue(fromTaxonIdUuidName.getName());
    }

    private void initConceptRComboBox() {
        conceptRComboBox.setImmediate(true);

        conceptRComboBox.setItemCaptionPropertyId("titleCache");
        try {
            conceptRComboBox.setContainerDataSource(presenter.loadTaxonRelationshipTypeContainer());
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        if(taxonRTypeIdUuidName == null) {
            conceptRComboBox.setInputPrompt(CHOOSE_TREL_TYPE);
        } else {
            conceptRComboBox.setValue(taxonRTypeIdUuidName.getId());
        }
    }

    private void buildToTaxon() {
        toTaxonVLayout = buildToTaxonVLayout();
        toTaxonLayoutWrapper = new DragAndDropWrapper(toTaxonVLayout);
        toTaxonLayoutWrapper.setImmediate(false);
        toTaxonLayoutWrapper.setWidth("-1px");
        toTaxonLayoutWrapper.setHeight("-1px");

        toTaxonLayoutWrapper.setDropHandler(new DropHandler() {

            @Override
            public AcceptCriterion getAcceptCriterion() {
                return AcceptAll.get();
            }

            @Override
            public void drop(DragAndDropEvent event) {
                // Wrapper for the object that is dragged
                Transferable t = event.getTransferable();

                // Make sure the drag source is a status composite tree table
                if (t.getSourceComponent() instanceof TreeTable) {
                    TreeTable table = (TreeTable)t.getSourceComponent();
                    Hierarchical containerDataSource = table.getContainerDataSource();
                    if(containerDataSource instanceof LeafNodeTaxonContainer) {
                        LeafNodeTaxonContainer lntc = (LeafNodeTaxonContainer)containerDataSource;
                        Object sourceItemId = t.getData("itemId");
                        String toName = (String)lntc.getProperty(sourceItemId, LeafNodeTaxonContainer.NAME_ID).getValue();
                        toTaxonIdUuidName = new IdUuidName(sourceItemId,
                                lntc.getUuid(sourceItemId),
                                toName);
                        toTaxonTextField.setValue(toName);
                    }
                }
            }
        });

        horizontalLayout.addComponent(toTaxonLayoutWrapper);
        horizontalLayout.setComponentAlignment(toTaxonLayoutWrapper, new Alignment(48));

    }

    private void initToTaxon() {
        if(toTaxonIdUuidName == null) {
            toTaxonTextField.setValue(DRAG_TAXON_HINT);
        } else {
            toTaxonTextField.setValue(toTaxonIdUuidName.getName());
        }
    }

    private void addUIListeners() {
        addSaveButtonListener();
        addCancelButtonListener();

    }

    private void addSaveButtonListener() {
        saveButton.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {


                try {
                    conceptRComboBox.validate();
                    toTaxonTextField.validate();
                } catch (EmptyValueException e) {
                    Notification notification = new Notification("Invalid input", "Neither Relationship Type nor To Taxon can be empty", Type.WARNING_MESSAGE);
                    notification.setDelayMsec(2000);
                    notification.show(Page.getCurrent());
                    return;
                }

                CdmVaadinUtilities.setEnabled(mainLayout, false, null);

                CdmVaadinUtilities.exec(new CdmVaadinOperation(500, cdmProgressComponent) {
                    @Override
                    public boolean execute() {
                        setProgress("Saving New Concept Relationship");
                        UUID relTypeUuid = presenter.getTaxonRTypeContainer().getUuid(conceptRComboBox.getValue());
                        presenter.createRelationship(fromTaxonIdUuidName.getUuid(), relTypeUuid, toTaxonIdUuidName.getUuid());
                        fireEvent(new CdmChangeEvent(Action.Create, Arrays.asList((Object)relTypeUuid), EditConceptRelationshipComposite.class));
                        return true;
                    }

                    @Override
                    public void postOpUIUpdate(boolean success) {
                        if(success) {
                            UI.getCurrent().removeWindow(dialog);
                        } else {
                            CdmVaadinUtilities.setEnabled(mainLayout, true, null);
                        }
                    }
                });
            }
        });
    }

    private void addCancelButtonListener() {
        cancelButton.addClickListener(new ClickListener() {

            @Override
            public void buttonClick(ClickEvent event) {
                UI.getCurrent().removeWindow(dialog);

            }
        });
    }


    private VerticalLayout buildToTaxonVLayout() {
        // common part: create layout
        toTaxonVLayout = new VerticalLayout();
        toTaxonVLayout.setImmediate(false);
        toTaxonVLayout.setWidth("-1px");
        toTaxonVLayout.setHeight("-1px");
        toTaxonVLayout.setMargin(false);
        toTaxonVLayout.setSpacing(true);

        // toTaxonLabeL
        toTaxonLabeL = new Label();
        toTaxonLabeL.setImmediate(false);
        toTaxonLabeL.setWidth("-1px");
        toTaxonLabeL.setHeight("-1px");
        toTaxonLabeL.setValue("To Taxon");
        toTaxonVLayout.addComponent(toTaxonLabeL);
        toTaxonVLayout.setComponentAlignment(toTaxonLabeL, new Alignment(48));

        // toTaxonTextField
        toTaxonTextField = new TextField();
        toTaxonTextField.setImmediate(false);
        toTaxonTextField.setWidth("-1px");
        toTaxonTextField.setHeight("-1px");
        toTaxonTextField.setInvalidAllowed(false);
        toTaxonTextField.setRequired(true);
        toTaxonTextField.setInputPrompt("Drag Taxon here ...");
        toTaxonVLayout.addComponent(toTaxonTextField);
        toTaxonVLayout.setComponentAlignment(toTaxonTextField, new Alignment(48));

        return toTaxonVLayout;
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("602px");
        mainLayout.setHeight("170px");
        mainLayout.setMargin(false);
        mainLayout.setSpacing(true);

        // top-level component properties
        setWidth("602px");
        setHeight("170px");

        // horizontalLayout
        horizontalLayout = buildHorizontalLayout();
        mainLayout.addComponent(horizontalLayout);

        // saveCancelHLayout
        saveCancelHLayout = buildSaveCancelHLayout();
        mainLayout.addComponent(saveCancelHLayout);
        mainLayout.setComponentAlignment(saveCancelHLayout, new Alignment(48));

        // cdmProgressComponent
        cdmProgressComponent = new CdmProgressComponent();
        cdmProgressComponent.setImmediate(false);
        cdmProgressComponent.setWidth("-1px");
        cdmProgressComponent.setHeight("-1px");
        mainLayout.addComponent(cdmProgressComponent);
        mainLayout.setComponentAlignment(cdmProgressComponent, new Alignment(48));

        return mainLayout;
    }

    @AutoGenerated
    private HorizontalLayout buildHorizontalLayout() {
        // common part: create layout
        horizontalLayout = new HorizontalLayout();
        horizontalLayout.setImmediate(false);
        horizontalLayout.setWidth("602px");
        horizontalLayout.setHeight("-1px");
        horizontalLayout.setMargin(true);
        horizontalLayout.setSpacing(true);

        // fromTaxonVLayout
        fromTaxonVLayout = buildFromTaxonVLayout();
        horizontalLayout.addComponent(fromTaxonVLayout);
        horizontalLayout.setComponentAlignment(fromTaxonVLayout, new Alignment(48));

        // typeVLayout
        typeVLayout = buildTypeVLayout();
        horizontalLayout.addComponent(typeVLayout);
        horizontalLayout.setExpandRatio(typeVLayout, 1.0f);
        horizontalLayout.setComponentAlignment(typeVLayout, new Alignment(48));

        return horizontalLayout;
    }

    @AutoGenerated
    private VerticalLayout buildFromTaxonVLayout() {
        // common part: create layout
        fromTaxonVLayout = new VerticalLayout();
        fromTaxonVLayout.setImmediate(false);
        fromTaxonVLayout.setWidth("-1px");
        fromTaxonVLayout.setHeight("-1px");
        fromTaxonVLayout.setMargin(false);
        fromTaxonVLayout.setSpacing(true);

        // fromTaxonLabel
        fromTaxonLabel = new Label();
        fromTaxonLabel.setImmediate(false);
        fromTaxonLabel.setWidth("-1px");
        fromTaxonLabel.setHeight("-1px");
        fromTaxonLabel.setValue("From Taxon");
        fromTaxonVLayout.addComponent(fromTaxonLabel);
        fromTaxonVLayout.setComponentAlignment(fromTaxonLabel, new Alignment(48));

        // fromTaxonValue
        fromTaxonValue = new Label();
        fromTaxonValue.setImmediate(false);
        fromTaxonValue.setWidth("-1px");
        fromTaxonValue.setHeight("-1px");
        fromTaxonValue.setValue("Taxon Name");
        fromTaxonVLayout.addComponent(fromTaxonValue);
        fromTaxonVLayout.setComponentAlignment(fromTaxonValue, new Alignment(48));

        return fromTaxonVLayout;
    }

    @AutoGenerated
    private VerticalLayout buildTypeVLayout() {
        // common part: create layout
        typeVLayout = new VerticalLayout();
        typeVLayout.setImmediate(false);
        typeVLayout.setWidth("-1px");
        typeVLayout.setHeight("-1px");
        typeVLayout.setMargin(false);
        typeVLayout.setSpacing(true);

        // typeLabel
        typeLabel = new Label();
        typeLabel.setImmediate(false);
        typeLabel.setWidth("-1px");
        typeLabel.setHeight("-1px");
        typeLabel.setValue("Type");
        typeVLayout.addComponent(typeLabel);
        typeVLayout.setComponentAlignment(typeLabel, new Alignment(48));

        // conceptRComboBox
        conceptRComboBox = new ComboBox();
        conceptRComboBox.setImmediate(false);
        conceptRComboBox.setWidth("-1px");
        conceptRComboBox.setHeight("-1px");
        conceptRComboBox.setRequired(true);
        typeVLayout.addComponent(conceptRComboBox);
        typeVLayout.setComponentAlignment(conceptRComboBox, new Alignment(48));

        return typeVLayout;
    }

    @AutoGenerated
    private HorizontalLayout buildSaveCancelHLayout() {
        // common part: create layout
        saveCancelHLayout = new HorizontalLayout();
        saveCancelHLayout.setImmediate(false);
        saveCancelHLayout.setWidth("-1px");
        saveCancelHLayout.setHeight("-1px");
        saveCancelHLayout.setMargin(false);
        saveCancelHLayout.setSpacing(true);

        // saveButton
        saveButton = new Button();
        saveButton.setCaption("save");
        saveButton.setImmediate(true);
        saveButton.setWidth("-1px");
        saveButton.setHeight("-1px");
        saveCancelHLayout.addComponent(saveButton);

        // cancelButton
        cancelButton = new Button();
        cancelButton.setCaption("cancel");
        cancelButton.setImmediate(true);
        cancelButton.setWidth("-1px");
        cancelButton.setHeight("-1px");
        saveCancelHLayout.addComponent(cancelButton);

        return saveCancelHLayout;
    }

}
