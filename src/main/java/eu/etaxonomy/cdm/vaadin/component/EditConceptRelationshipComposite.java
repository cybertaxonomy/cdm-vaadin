// $Id$
/**
* Copyright (C) 2015 EDIT
* European Distributed Institute of Taxonomy
* http://www.e-taxonomy.eu
*
* The contents of this file are subject to the Mozilla Public License Version 1.1
* See LICENSE.TXT at the top of this package for the full license terms.
*/
package eu.etaxonomy.cdm.vaadin.component;

import java.sql.SQLException;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnHeaderMode;
import com.vaadin.ui.VerticalLayout;

import eu.etaxonomy.cdm.vaadin.presenter.EditConceptRelationshipPresenter;

/**
 * @author cmathew
 * @date 13 Apr 2015
 *
 */
public class EditConceptRelationshipComposite extends CustomComponent {

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private VerticalLayout mainLayout;
    @AutoGenerated
    private HorizontalLayout saveCancelHLayout;
    @AutoGenerated
    private Button cancelButton;
    @AutoGenerated
    private Button saveButton;
    @AutoGenerated
    private Table toTaxaTable;
    @AutoGenerated
    private ComboBox conceptRComboBox;
    @AutoGenerated
    private Label fromTaxonLabel;

    private final EditConceptRelationshipPresenter presenter;

    private final Object fromTaxonId, taxonRTypeId;

    private final String fromTaxonName;
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public EditConceptRelationshipComposite(Object fromTaxonId, String fromTaxonName, Object taxonRTypeId) {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        this.presenter = new EditConceptRelationshipPresenter();
        this.fromTaxonId = fromTaxonId;
        this.fromTaxonName = fromTaxonName;
        this.taxonRTypeId = taxonRTypeId;
        init();
    }

    private void init() {
        initConceptRComboBox();
    }

    private void initConceptRComboBox() {
        conceptRComboBox.setImmediate(true);
        try {
            conceptRComboBox.setContainerDataSource(presenter.loadTaxonRelationshipTypeContainer());
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        conceptRComboBox.setValue(taxonRTypeId);
    }

    private void initToTaxaTable() {
        toTaxaTable.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
        try {
            toTaxaTable.setContainerDataSource(presenter.loadTaxonRelationshipContainer(fromTaxonId));
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("260px");
        mainLayout.setHeight("252px");
        mainLayout.setMargin(true);
        mainLayout.setSpacing(true);

        // top-level component properties
        setWidth("260px");
        setHeight("252px");

        // fromTaxonLabel
        fromTaxonLabel = new Label();
        fromTaxonLabel.setImmediate(false);
        fromTaxonLabel.setWidth("-1px");
        fromTaxonLabel.setHeight("-1px");
        fromTaxonLabel.setValue("From Taxon");
        mainLayout.addComponent(fromTaxonLabel);
        mainLayout.setComponentAlignment(fromTaxonLabel, new Alignment(20));

        // conceptRcomboBox
        conceptRComboBox = new ComboBox();
        conceptRComboBox.setImmediate(false);
        conceptRComboBox.setWidth("-1px");
        conceptRComboBox.setHeight("-1px");
        mainLayout.addComponent(conceptRComboBox);
        mainLayout.setComponentAlignment(conceptRComboBox, new Alignment(20));

        // toTaxaTable
        toTaxaTable = new Table();
        toTaxaTable.setImmediate(false);
        toTaxaTable.setWidth("199px");
        toTaxaTable.setHeight("124px");
        mainLayout.addComponent(toTaxaTable);
        mainLayout.setExpandRatio(toTaxaTable, 1.0f);
        mainLayout.setComponentAlignment(toTaxaTable, new Alignment(20));

        // saveCancelHLayout
        saveCancelHLayout = buildSaveCancelHLayout();
        mainLayout.addComponent(saveCancelHLayout);
        mainLayout.setComponentAlignment(saveCancelHLayout, new Alignment(20));

        return mainLayout;
    }

    @AutoGenerated
    private HorizontalLayout buildSaveCancelHLayout() {
        // common part: create layout
        saveCancelHLayout = new HorizontalLayout();
        saveCancelHLayout.setImmediate(false);
        saveCancelHLayout.setWidth("-1px");
        saveCancelHLayout.setHeight("-1px");
        saveCancelHLayout.setMargin(false);
        saveCancelHLayout.setSpacing(true);

        // saveButton
        saveButton = new Button();
        saveButton.setCaption("save");
        saveButton.setImmediate(false);
        saveButton.setWidth("-1px");
        saveButton.setHeight("-1px");
        saveCancelHLayout.addComponent(saveButton);

        // cancelButton
        cancelButton = new Button();
        cancelButton.setCaption("cancel");
        cancelButton.setImmediate(false);
        cancelButton.setWidth("-1px");
        cancelButton.setHeight("-1px");
        saveCancelHLayout.addComponent(cancelButton);

        return saveCancelHLayout;
    }

}
